@page "/"
@page "/products"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject adminShop.Services.IProductService ProductService

<h3>Product Table</h3>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Category</th>
                <th>Price (₽)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.ProductId</td>
                    <td>@product.NameProduct</td>
                    <td>@product.Category?.NameCategories</td>
                    <td>@product.Price.ToString("N2")</td>
                    @*
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => NavigateToUpdate(product.ProductId)">Update</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteProduct(product.ProductId)">Delete</button>
                    </td>
                    *@
                </tr>
            }
        </tbody>
    </table>
}

<button class="btn btn-primary" @onclick="OpenAddProduct">Add New Product</button>

@code {
    private List<shopData.Models.Product> products;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProducts();
    }

    private void OpenAddProduct()
    {
        Navigation.NavigateTo("/add-product");
    }

    private void NavigateToUpdate(int id)
    {
        Navigation.NavigateTo($"/update-product/{id}");
    }

    private async Task DeleteProduct(int id)
    {
        await ProductService.DeleteProduct(id);
        products = await ProductService.GetProducts();
    }
}
