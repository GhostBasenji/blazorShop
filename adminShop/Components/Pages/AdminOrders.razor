@page "/orders"
@using shopData.Models
@using Microsoft.EntityFrameworkCore
@inject shopDbContext Db

<h3>Customer Orders</h3>

@if (orders == null)
{
    <p><em>Loading...</em></p>
}
else if (!orders.Any())
{
    <p><em>No orders have been placed yet.</em></p>
}
else
{
    @foreach (var order in orders)
    {
        <div class="card mb-4">
            <div class="card-header">
                <strong>Order #@order.OrderId</strong><br />
                Date: @order.OrderDate?.ToString("g")<br />
                Delivery: @order.DeliveryAddress
            </div>
            <div class="card-body">
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Qty</th>
                            <th>Price</th>
                            <th>Subtotal</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in order.OrderItems)
                        {
                            <tr>
                                <td>@item.Product.NameProduct</td>
                                <td>@item.Quantity</td>
                                <td>@item.Product.Price</td>
                                <td>@(item.Product.Price* item.Quantity)</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <strong>Total: @order.OrderItems.Sum(i => i.Product.Price * i.Quantity)</strong>
            </div>
        </div>
    }
}

@code {
    private List<Order> orders;

    protected override async Task OnInitializedAsync()
    {
        orders = await Db.Orders
            .Include(o => o.OrderItems)
                .ThenInclude(oi => oi.Product)
            .OrderByDescending(o => o.OrderDate)
            .ToListAsync();
    }
}
