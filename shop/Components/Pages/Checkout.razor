@page "/checkout"
@using System.ComponentModel.DataAnnotations
@inject CartService CartService
@inject shopDbContext Db
@inject NavigationManager Navigation
@inject IOrderService OrderService
@rendermode InteractiveServer

<h3>Checkout</h3>

@if (!CartService.GetItems().Any())
{
    <p>Your cart is empty. <a href="/products">Go shopping</a></p>
}
else
{
    <EditForm Model="orderModel" OnValidSubmit="HandleCheckout">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="deliveryAddress" class="form-label">Delivery Address</label>
            <InputTextArea id="deliveryAddress" class="form-control" @bind-Value="orderModel.DeliveryAddress" />
        </div>

        <button type="submit" class="btn btn-primary" disabled="@isProcessing">
            @(isProcessing ? "Processing..." : "Confirm Order")
        </button>
    </EditForm>
}

@code {
    private bool isProcessing = false;

    // Модель для формы (простейшая)
    private OrderModel orderModel = new();

    // Временный клиент (пока без аутентификации)
    private int customerId = 1;

    private async Task HandleCheckout()
    {
        Console.WriteLine("🟡 HandleCheckout called");

        isProcessing = true;

        try
        {
            var success = await OrderService.PlaceOrderAsync(
                customerId,
                orderModel.DeliveryAddress,
                CartService.GetItems()
            );

            if (success)
            {
                CartService.Clear();
                Navigation.NavigateTo("/thankyou");
            }
            else
            {
                // Покажи сообщение об ошибке
                Console.WriteLine("Order failed.");
            }
        }
        finally
        {
            isProcessing = false;
        }
    }

    // Простая модель для формы
    public class OrderModel
    {
        [Required(ErrorMessage = "Delivery address is required.")]
        public string DeliveryAddress { get; set; }
    }
}
